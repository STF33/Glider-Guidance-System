# Glider Guidance System (GGS) Pathfinding Algorithm Documentation

## Overview
This algorithm is designed to compute the optimal path for an underwater glider, taking into account depth-averaged ocean currents (DAC) and other navigational factors. It uses a modified version of the A* search algorithm to determine the most efficient path between specified waypoints based on the DAC data.

## Algorithm Code Structure

### Inputs
- `config`: A dictionary containing mission configuration details including waypoints in the form of GPS coordinates.
- `directory`: The path to the directory where output statistics files will be saved.
- `model_dataset`: An `xarray.Dataset` containing depth-averaged ocean current data including east-west (`u`) and north-south (`v`) components.
- `glider_raw_speed`: The base speed of the glider in meters per second, defaulting to 0.5 m/s.

### Helper Functions
- `calculate_haversine_distance(longitude1, latitude1, longitude2, latitude2)`: Calculates the great circle distance between two points on the earth.
- `calculate_direct_path(start_index, end_index, glider_raw_speed)`: Provides a direct path calculation in case no optimal path is found.
- `convert_coord2grid(latitude, longitude)`: Converts geographical latitude and longitude into the nearest index on the dataset grid.
- `convert_grid2coord(latitude_index, longitude_index)`: Converts dataset grid indices back to geographical coordinates.
- `calculate_heuristic_cost(current_index, goal_index)`: Computes the estimated cost from the current node to the goal using the Haversine formula.
- `calculate_movement(model_dataset, start_index, end_index, glider_raw_speed)`: Combines movement cost calculation with adjustments for ocean currents' impact.
- `generate_neighbor_nodes(index)`: Yields neighboring nodes for exploration based on the current node's position.
- `reconstruct_path(came_from_dictionary, start_index, goal_index)`: Reconstructs the path from start to end using the dictionary populated by the A* algorithm.
- `algorithm_a_star(model_dataset, start_index, end_index, glider_raw_speed)`: Implements the A* algorithm to find the most efficient path.
### Output
- `optimal_mission_path`: A list of tuples representing the latitude and longitude coordinates of the optimal route along the DAC grid.

## Algorithm Mathematical Approach

### 1. **Vector Representation of Movements and Currents**

- **Movement Vector (M)**: Defines the vector from the current node to a neighboring node, calculated based on the distance between geographic coordinates.
- **Current Vector (C)**: Represents the ocean current velocity at the node, given by components `u` (eastward) and `v` (northward).

### 2. **Step-Wise Decision Making**

#### a. **Calculate the Movement Vector *(M)***

For each adjacent node, compute the movement vector *(M)*:
$$ M = (\Delta \text{lon}, \Delta \text{lat}) $$

Normalize *(M)* to obtain the unit direction vector *($\hat{M}$)*:
$$ \hat{M} = \frac{M}{\|M\|} $$

#### b. **Current Vector at the start Node *(C)***

Retrieve the current vector *(C)* at the starting node:
$$ C = (u, v) $$

Calculate the current vector of *(C)* from the current components `u` and `v`.
$$ |\mathbf{C}| = \sqrt{u^2 + v^2} $$

Determine the angle *(Î¸)* of the current vector *(C)* using the arctangent function, considering both components:
$$ \theta = \arctan2(v, u) $$

Express the dot product in terms of the angle between the current vector and the movement direction; where $\phi$ is the angle between the vectors, and $\cos(\phi)$ reflects the impact of the current's direction relative to the AUV's movement.:
$$ C_{\text{along}} = |\mathbf{C}| |\hat{M}| \cos(\phi) $$

#### c. **Component of Current along the Movement Vector *($C_{\text{along}}$)***

Compute the component of the current vector *(C)* along the movement vectors direction *($\hat{M}$)* using the dot product:
$$ C_{\text{along}} = \hat{M} \cdot C $$

#### d. **Calculate Effective Speed *($V_{\text{net}}$)***

Combine the raw speed of the AUV *($V_{\text{raw}}$)* with the current's component along the movement vector *($C_{\text{along}}$)*:
$$ V_{\text{net}} = V_{\text{raw}} + C_{\text{along}} $$

#### e. **Compute Travel Cost**

Calculate the time cost to move to the adjacent node using the net speed *($V_{\text{net}}$)*:
$$ \text{Time} = \frac{\text{Distance}}{V_{\text{net}}} $$
